import { Bot } from 'grammy'
import { activateProduct } from '../product/activate'

const logger = useLogger('telegram')
const { telegramBotToken, telegramGameBotToken, telegramAdminId } = useRuntimeConfig()

const startAppData = 'new'
const gameUrl = `tg://resolve?domain=woodlandsgamebot&appname=game&startapp=${startAppData}`
const gameChannelUrl = 'https://t.me/chatgamespace'

const woodlandsBotUrl = 'https://t.me/WoodlandsGameBot'
const twitchUrl = 'https://twitch.tv/hmbanan666'
const chatgameUrl = 'https://chatgame.space'

const ru: typeof en = {
  chatgame: {
    welcomeMessage: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChatGame! ü•≥

–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá`,
    playingOnTwitch: 'üëæ –ò–≥—Ä–∞–µ–º –Ω–∞ Twitch',
  },
  woodland: {
    welcomeMessage: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Woodlands! ü•≥

–û–¥–Ω–∞ –∏–∑ –∑–∞–¥–∞—á - —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å –ú–∞—à–∏–Ω—É –∏–∑ —Ç–æ—á–∫–∏ –ê –≤ —Ç–æ—á–∫—É –ë. –ü–æ –ø—É—Ç–∏ –º–æ–≥—É—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è. –¢–∞–ø–∞–π –∏—Ö! üëÜüí™

–£—á–∞—Å—Ç–≤—É–π –≤ —Å–æ–±—ã—Ç–∏—è—Ö, –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π, –¥–æ–±—ã–≤–∞–π –ú–æ–Ω–µ—Ç—ã –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π –≤—Ä—É—á–Ω—É—é —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. ü§¥üéÖüê∂`,
    title: 'üå≤ Woodlands: –û–Ω–ª–∞–π–Ω-–∏–≥—Ä–∞',
    play: 'üéÆ –ò–≥—Ä–∞—Ç—å',
    developingGameOnTwitch: 'üëæ –£–ª—É—á—à–∞–µ–º –∏–≥—Ä—É –Ω–∞ Twitch',
    website: '–í–µ–±-—Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞',
  },
  subscribeToChannel: 'üì¢ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª',
  defaultBotReply: '–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è. –°–≤—è–∂–∏—Å—å —Å @hmbanan666, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã.',
}

const en = {
  chatgame: {
    welcomeMessage: `Welcome to ChatGame! ü•≥

Choose the game or action üëá`,
    playingOnTwitch: 'üëæ Playing on Twitch',
  },
  woodland: {
    welcomeMessage: `Welcome to Woodlands! ü•≥

One of the tasks is to accompany the Machine from point A to point B. Along the way, obstacles may appear. Tap them! üëÜüí™

Participate in events, invite friends, collect Coins and unlock manually created characters. ü§¥üéÖüê∂`,
    title: 'üå≤ Woodlands: Online Game',
    play: 'üéÆ Play',
    developingGameOnTwitch: 'üëæ Developing game on Twitch',
    website: 'Website of project',
  },
  subscribeToChannel: 'üì¢ Subscribe to the channel',
  defaultBotReply: 'I dont know how to reply to messages yet. Contact @hmbanan666 if you have any questions.',
}

function dictionary(locale: string | undefined = 'en') {
  switch (locale) {
    case 'ru':
      return ru
    default:
      return en
  }
}

const bot = new Bot(telegramBotToken)
const gameBot = new Bot(telegramGameBotToken)

// Old bot
bot.on('message:text', async (ctx) => {
  const locale = ctx.message.from.language_code

  if (ctx.hasCommand('start')) {
    // Welcome message with buttons
    await ctx.reply(
      dictionary(locale).chatgame.welcomeMessage,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: dictionary(locale).woodland.title, url: woodlandsBotUrl }],
            [{ text: dictionary(locale).subscribeToChannel, url: gameChannelUrl }],
            [{ text: dictionary(locale).chatgame.playingOnTwitch, url: twitchUrl }],
          ],
        },
      },
    )

    return
  }

  logger.log(ctx.message.from.id, ctx.message.text)
  ctx.reply(dictionary(locale).defaultBotReply)
})

// Game bot
gameBot.on('message:text', async (ctx) => {
  const locale = ctx.message.from.language_code

  if (ctx.hasCommand('start')) {
    // Tree sticker
    await ctx.replyWithSticker('CAACAgEAAxkBAAENexdng5nCguO04hJRGAABxUYQUdZlkmMAAj8CAALjmxhEgCIYC2AbEOM2BA')

    // Welcome message with buttons
    await ctx.reply(
      dictionary(locale).woodland.welcomeMessage,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: dictionary(locale).woodland.play, url: gameUrl }],
            [{ text: dictionary(locale).subscribeToChannel, url: gameChannelUrl }],
            [{ text: dictionary(locale).woodland.website, url: chatgameUrl }],
          ],
        },
      },
    )

    await notifyAdmin(`[Woodlands] –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.message.from.id} ${ctx.message.from.first_name}, locale: ${ctx.message.from.language_code}`)

    return
  }

  logger.log(ctx.message.from.id, ctx.message.text)
  ctx.reply(dictionary(locale).defaultBotReply)
})

// regexp: id in object like { payment_id: 123 }
gameBot.preCheckoutQuery(/.+/, async (ctx) => {
  try {
    const invoicePayload = JSON.parse(ctx.preCheckoutQuery.invoice_payload)

    // Telegram payment in stars
    if (invoicePayload?.payment_id) {
      await ctx.answerPreCheckoutQuery(true)
    }
  } catch (error) {
    logger.error(error)
  }
})

// successful_payment
gameBot.on('message:successful_payment', async (ctx) => {
  try {
    if (ctx?.message?.successful_payment?.invoice_payload && ctx?.message?.successful_payment?.telegram_payment_charge_id) {
      const invoicePayload = JSON.parse(ctx.message.successful_payment.invoice_payload)

      // Telegram payment in stars
      if (invoicePayload?.payment_id) {
        const id = invoicePayload?.payment_id as string
        const telegramChargeId = ctx.message.successful_payment.telegram_payment_charge_id

        const payment = await prisma.payment.findFirst({
          where: { id },
        })
        if (!payment) {
          return
        }

        await prisma.payment.update({
          where: { id },
          data: {
            status: 'PAID',
            telegramChargeId,
          },
        })

        await activateProduct({ productId: payment.productId, profileId: payment.profileId })

        await notifyAdmin(`[Woodlands] –ü—Ä–æ—Ñ–∏–ª—å ${payment.profileId} —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É. +${payment.amount} XTR`)
      }
    }

    logger.log('message:successful_payment', ctx?.message?.successful_payment)
  } catch (error) {
    logger.error(error)
  }
})

async function notifyAdmin(message: string) {
  return bot.api.sendMessage(telegramAdminId, message)
}

export { bot, gameBot, notifyAdmin }
