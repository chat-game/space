generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id                 String                 @id
  createdAt          DateTime               @default(now()) @map("created_at")
  updatedAt          DateTime               @default(now()) @map("updated_at")
  twitchId           String                 @map("twitch_id")
  userName           String                 @map("user_name")
  isStreamer         Boolean                @default(false)
  coupons            Int                    @default(0)
  coins              Int                    @default(0)
  mana               Int                    @default(0)
  level              Int                    @default(1)
  points             Int                    @default(0)
  patronPoints       Int                    @default(0) @map("patron_points")
  trophyHunterPoints Int                    @default(0) @map("trophy_hunter_points")
  rangerPoints       Int                    @default(0) @map("ranger_points")
  storytellerPoints  Int                    @default(0) @map("storyteller_points")
  collectorPoints    Int                    @default(0) @map("collector_points")
  activeEditionId    String                 @map("active_edition_id")
  telegramProfileId  String?                @unique @map("telegram_profile_id")
  telegramProfile    TelegramProfile?       @relation(fields: [telegramProfileId], references: [id])
  quests             Quest[]
  questEditions      QuestEdition[]
  twitchTokens       TwitchToken[]
  characters         Character[]
  characterEditions  CharacterEdition[]
  transactions       Transaction[]
  trophyEditions     TrophyEdition[]
  itemEditions       InventoryItemEdition[]

  @@map("profile")
}

model TelegramProfile {
  id         String   @id
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  telegramId String   @map("telegram_id")
  level      Int      @default(1)
  coins      Int      @default(0)
  energy     Int      @default(0)
  username   String?
  profile    Profile?

  @@map("telegram_profile")
}

model Payment {
  id         String   @id
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  externalId String   @map("external_id")
  provider   String
  status     String
  amount     Int      @default(0)
  profileId  String   @map("profile_id")
  productId  String   @map("product_id")

  @@map("payment")
}

model Product {
  id           String    @id
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @map("updated_at")
  finishAt     DateTime? @map("finish_at")
  title        String
  description  String
  coins        Int       @default(0)
  bonusCoins   Int       @default(0) @map("bonus_coins")
  price        Int       @default(0)
  regularPrice Int       @default(0) @map("regular_price")
  starsPrice   Int       @default(0) @map("stars_price")
  isActive     Boolean   @default(true) @map("is_active")
  priority     Int       @default(0)

  @@map("product")
}

model TwitchToken {
  id            String   @id
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")
  onlineAt      DateTime @default(now()) @map("online_at")
  status        String
  type          String
  points        Int      @default(0)
  language      String   @default("ru")
  accessTokenId String?  @map("access_token_id")
  profileId     String   @map("profile_id")
  profile       Profile  @relation(fields: [profileId], references: [id])

  @@map("twitch_token")
}

model TwitchAccessToken {
  id                  String   @id
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @default(now()) @map("updated_at")
  userId              String   @map("user_id")
  accessToken         String   @map("access_token")
  refreshToken        String?  @map("refresh_token")
  scope               String[] @map("scope")
  expiresIn           Int?     @map("expires_in")
  obtainmentTimestamp String   @map("obtainment_timestamp")

  @@map("twitch_access_token")
}

model Village {
  id                  String   @id
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @default(now()) @map("updated_at")
  globalTarget        Int?     @map("global_target")
  globalTargetSuccess Int?     @map("global_target_success")
  wood                Int      @default(0) @map("wood")
  stone               Int      @default(0) @map("stone")

  @@map("village")
}

model Player {
  id              String   @id
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @map("updated_at")
  lastActionAt    DateTime @default(now()) @map("last_action_at")
  name            String   @map("name")
  coins           Int      @default(0)
  reputation      Int      @default(0)
  viewerPoints    Int      @default(0) @map("viewer_points")
  villainPoints   Int      @default(0) @map("villain_points")
  refuellerPoints Int      @default(0) @map("refueller_points")
  raiderPoints    Int      @default(0) @map("raider_points")
  inventoryId     String   @map("inventory_id")
  profileId       String   @map("profile_id")

  @@map("player")
}

model Skill {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  type      String
  lvl       Int      @default(0)
  xp        Int      @default(0)
  xpNextLvl Int      @default(20) @map("xp_next_lvl")
  objectId  String   @map("object_id")

  @@map("skill")
}

model InventoryItem {
  id          String                 @id
  createdAt   DateTime               @default(now()) @map("created_at")
  updatedAt   DateTime               @default(now()) @map("updated_at")
  type        String
  name        String
  description String
  editions    InventoryItemEdition[]

  @@map("inventory_item")
}

model InventoryItemEdition {
  id         String        @id
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @default(now()) @map("updated_at")
  amount     Int           @default(0)
  durability Int           @default(100)
  itemId     String        @map("item_id")
  item       InventoryItem @relation(fields: [itemId], references: [id])
  profileId  String        @map("profile_id")
  profile    Profile       @relation(fields: [profileId], references: [id])

  @@map("inventory_item_edition")
}

model Character {
  id              String             @id
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @default(now()) @map("updated_at")
  codename        String?
  nickname        String
  name            String
  description     String
  isReady         Boolean            @default(false) @map("is_ready")
  unlockedBy      String             @default("COINS") @map("unlocked_by")
  price           Int                @default(0)
  animationIdle   String?            @map("animation_idle")
  animationMoving String?            @map("animation_moving")
  profileId       String             @map("profile_id")
  profile         Profile            @relation(fields: [profileId], references: [id])
  gameId          String             @map("game_id")
  game            Game               @relation(fields: [gameId], references: [id])
  editions        CharacterEdition[]

  @@map("character")
}

model CharacterEdition {
  id          String    @id
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  level       Int       @default(1)
  xp          Int       @default(0)
  profileId   String    @map("profile_id")
  profile     Profile   @relation(fields: [profileId], references: [id])
  characterId String    @map("character_id")
  character   Character @relation(fields: [characterId], references: [id])

  @@map("character_edition")
}

model Coupon {
  id                String   @id
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  activationCommand String   @map("activation_command")
  status            String
  profileId         String?  @map("profile_id")

  @@map("coupon")
}

model Trophy {
  id          String          @id
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @default(now()) @map("updated_at")
  name        String
  description String
  points      Int
  rarity      Int             @default(0)
  isShown     Boolean         @default(false) @map("is_shown")
  hasImage    Boolean         @default(false) @map("has_image")
  editions    TrophyEdition[]

  @@map("trophy")
}

model TrophyEdition {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  profileId String   @map("profile_id")
  profile   Profile  @relation(fields: [profileId], references: [id])
  trophyId  String   @map("trophy_id")
  trophy    Trophy   @relation(fields: [trophyId], references: [id])

  @@map("trophy_edition")
}

model Quest {
  id                String         @id
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @default(now()) @map("updated_at")
  name              String
  description       String
  points            Int
  progressCompleted Int            @default(1) @map("progress_completed")
  profileId         String         @map("profile_id")
  profile           Profile        @relation(fields: [profileId], references: [id])
  editions          QuestEdition[]
  rewards           QuestReward[]

  @@map("quest")
}

model QuestEdition {
  id          String    @id
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  completedAt DateTime? @map("completed_at")
  status      String
  progress    Int       @default(0)
  profileId   String    @map("profile_id")
  profile     Profile   @relation(fields: [profileId], references: [id])
  questId     String    @map("quest_id")
  quest       Quest     @relation(fields: [questId], references: [id])

  @@map("quest_edition")
}

model QuestReward {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  type      String
  amount    Int      @default(0)
  entityId  String?  @map("entity_id")
  questId   String   @map("quest_id")
  quest     Quest    @relation(fields: [questId], references: [id])

  @@map("quest_reward")
}

model Game {
  id              String      @id
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @default(now()) @map("updated_at")
  slug            String      @unique
  title           String
  imageId         String      @map("image_id")
  charactersCount Int         @default(0) @map("characters_count")
  characters      Character[]

  @@map("game")
}

model Transaction {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  amount    Int      @default(0)
  type      String
  entityId  String   @map("entity_id")
  text      String?
  profileId String   @map("profile_id")
  profile   Profile  @relation(fields: [profileId], references: [id])

  @@map("transaction")
}

model Woodland {
  id         String           @id
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @default(now()) @map("updated_at")
  finishedAt DateTime?        @map("finished_at")
  status     String
  profileId  String           @map("profile_id")
  tokenId    String           @map("token_id")
  players    WoodlandPlayer[]

  @@map("woodland")
}

model WoodlandPlayer {
  id           String   @id
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  lastActionAt DateTime @default(now()) @map("last_action_at")
  name         String
  wood         Int      @default(0)
  profileId    String   @map("profile_id")
  woodlandId   String   @map("woodland_id")
  woodland     Woodland @relation(fields: [woodlandId], references: [id])

  @@map("woodland_player")
}
